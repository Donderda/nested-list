/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["NestedList"] = factory();
	else
		root["NestedList"] = factory();
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./styles/index.pcss":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./styles/index.pcss ***!
  \***************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(function(i){return i[1]});\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".cdx-nested-list {\\n  margin: 0;\\n  padding: 0;\\n  outline: none;\\n  counter-reset: item;\\n  list-style: none;\\n}\\n\\n  .cdx-nested-list__item {\\n    line-height: 1.6em;\\n    display: flex;\\n    margin: 2px 0;\\n  }\\n\\n  .cdx-nested-list__item [contenteditable]{\\n      outline: none;\\n    }\\n\\n  .cdx-nested-list__item-body {\\n      flex-grow: 2;\\n    }\\n\\n  .cdx-nested-list__item-content,\\n    .cdx-nested-list__item-children {\\n      flex-basis: 100%;\\n    }\\n\\n  .cdx-nested-list__item-content {\\n      word-break: break-word;\\n      white-space: pre-wrap;\\n    }\\n\\n  .cdx-nested-list__item-children {}\\n\\n  .cdx-nested-list__item::before {\\n      counter-increment: item;\\n      margin-right: 5px;\\n      white-space: nowrap;\\n    }\\n\\n  .cdx-nested-list--ordered > .cdx-nested-list__item::before {\\n    content: counters(item, \\\".\\\") \\\". \\\";\\n  }\\n\\n  .cdx-nested-list--unordered > .cdx-nested-list__item::before {\\n    content: \\\"•\\\";\\n  }\\n\\n  .cdx-nested-list--crossed > .cdx-nested-list__item::before {\\n    content: \\\"✗ \\\";\\n  }\\n\\n  .cdx-nested-list--hooked > .cdx-nested-list__item::before {\\n    content: \\\"✔ \\\";\\n  }\\n\\n  .cdx-nested-list__settings {\\n    display: flex;\\n  }\\n\\n  .cdx-nested-list__settings .cdx-settings-button {\\n      width: 50%;\\n    }\\n\", \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://NestedList/./styles/index.pcss?./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet%5B1%5D.rules%5B0%5D.use%5B2%5D");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join(\"\");\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === \"string\") {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, \"\"]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\n//# sourceURL=webpack://NestedList/./node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "./styles/index.pcss":
/*!***************************!*\
  !*** ./styles/index.pcss ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_0_use_2_index_pcss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./index.pcss */ \"./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./styles/index.pcss\");\n\n            \n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_0_use_2_index_pcss__WEBPACK_IMPORTED_MODULE_1__[\"default\"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_0_use_2_index_pcss__WEBPACK_IMPORTED_MODULE_1__[\"default\"].locals || {});\n\n//# sourceURL=webpack://NestedList/./styles/index.pcss?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : 0;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && typeof btoa !== 'undefined') {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack://NestedList/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ NestedList)\n/* harmony export */ });\n/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/dom */ \"./src/utils/dom.js\");\n/* harmony import */ var _utils_caret__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/caret */ \"./src/utils/caret.js\");\n/* harmony import */ var _styles_index_pcss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../styles/index.pcss */ \"./styles/index.pcss\");\n\n\n\n/**\n * Build styles\n */\n\n\n/**\n * @typedef {object} ListData\n * @property {string} style - list type 'ordered' or 'unordered'\n * @property {ListItem[]} items - list of first-level elements\n */\n\n/**\n * @typedef {object} ListItem\n * @property {string} content - list item text content\n * @property {ListItem[]} items - sublist items\n */\n\n/**\n * NestedList Tool for EditorJS\n */\nclass NestedList {\n    /**\n     * Notify core that read-only mode is supported\n     *\n     * @returns {boolean}\n     */\n    static get isReadOnlySupported() {\n        return true;\n    }\n\n    /**\n     * Allow to use native Enter behaviour\n     *\n     * @returns {boolean}\n     * @public\n     */\n    static get enableLineBreaks() {\n        return true;\n    }\n\n    /**\n     * Get Tool toolbox settings\n     * icon - Tool icon's SVG\n     * title - title to show in toolbox\n     *\n     * @returns {{icon: string, title: string}}\n     */\n    static get toolbox() {\n        return {\n            icon: '<svg width=\"17\" height=\"13\" viewBox=\"0 0 17 13\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M5.625 4.85h9.25a1.125 1.125 0 0 1 0 2.25h-9.25a1.125 1.125 0 0 1 0-2.25zm0-4.85h9.25a1.125 1.125 0 0 1 0 2.25h-9.25a1.125 1.125 0 0 1 0-2.25zm0 9.85h9.25a1.125 1.125 0 0 1 0 2.25h-9.25a1.125 1.125 0 0 1 0-2.25zm-4.5-5a1.125 1.125 0 1 1 0 2.25 1.125 1.125 0 0 1 0-2.25zm0-4.85a1.125 1.125 0 1 1 0 2.25 1.125 1.125 0 0 1 0-2.25zm0 9.85a1.125 1.125 0 1 1 0 2.25 1.125 1.125 0 0 1 0-2.25z\"/></svg>',\n            title: 'List',\n        };\n    }\n\n    /**\n     * Render plugin`s main Element and fill it with saved data\n     *\n     * @param {object} params - tool constructor options\n     * @param {ListData} params.data - previously saved data\n     * @param {object} params.config - user config for Tool\n     * @param {object} params.api - Editor.js API\n     * @param {boolean} params.readOnly - read-only mode flag\n     */\n    constructor({data, config, api, readOnly}) {\n        /**\n         * HTML nodes used in tool\n         */\n        this.nodes = {\n            wrapper: null,\n        };\n\n        this.api = api;\n        this.readOnly = readOnly;\n        this.config = config;\n\n        this.settings = [\n            {\n                name: 'unordered',\n                title: this.api.i18n.t('Unordered'),\n                icon: '<svg width=\"17\" height=\"13\" viewBox=\"0 0 17 13\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M5.625 4.85h9.25a1.125 1.125 0 0 1 0 2.25h-9.25a1.125 1.125 0 0 1 0-2.25zm0-4.85h9.25a1.125 1.125 0 0 1 0 2.25h-9.25a1.125 1.125 0 0 1 0-2.25zm0 9.85h9.25a1.125 1.125 0 0 1 0 2.25h-9.25a1.125 1.125 0 0 1 0-2.25zm-4.5-5a1.125 1.125 0 1 1 0 2.25 1.125 1.125 0 0 1 0-2.25zm0-4.85a1.125 1.125 0 1 1 0 2.25 1.125 1.125 0 0 1 0-2.25zm0 9.85a1.125 1.125 0 1 1 0 2.25 1.125 1.125 0 0 1 0-2.25z\"/></svg>',\n                default: true,\n            },\n            {\n                name: 'ordered',\n                title: this.api.i18n.t('Ordered'),\n                icon: '<svg width=\"17\" height=\"13\" viewBox=\"0 0 17 13\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M5.819 4.607h9.362a1.069 1.069 0 0 1 0 2.138H5.82a1.069 1.069 0 1 1 0-2.138zm0-4.607h9.362a1.069 1.069 0 0 1 0 2.138H5.82a1.069 1.069 0 1 1 0-2.138zm0 9.357h9.362a1.069 1.069 0 0 1 0 2.138H5.82a1.069 1.069 0 0 1 0-2.137zM1.468 4.155V1.33c-.554.404-.926.606-1.118.606a.338.338 0 0 1-.244-.104A.327.327 0 0 1 0 1.59c0-.107.035-.184.105-.234.07-.05.192-.114.369-.192.264-.118.475-.243.633-.373.158-.13.298-.276.42-.438a3.94 3.94 0 0 1 .238-.298C1.802.019 1.872 0 1.975 0c.115 0 .208.042.277.127.07.085.105.202.105.351v3.556c0 .416-.15.624-.448.624a.421.421 0 0 1-.32-.127c-.08-.085-.121-.21-.121-.376zm-.283 6.664h1.572c.156 0 .275.03.358.091a.294.294 0 0 1 .123.25.323.323 0 0 1-.098.238c-.065.065-.164.097-.296.097H.629a.494.494 0 0 1-.353-.119.372.372 0 0 1-.126-.28c0-.068.027-.16.081-.273a.977.977 0 0 1 .178-.268c.267-.264.507-.49.722-.678.215-.188.368-.312.46-.371.165-.11.302-.222.412-.334.109-.112.192-.226.25-.344a.786.786 0 0 0 .085-.345.6.6 0 0 0-.341-.553.75.75 0 0 0-.345-.08c-.263 0-.47.11-.62.329-.02.029-.054.107-.101.235a.966.966 0 0 1-.16.295c-.059.069-.145.103-.26.103a.348.348 0 0 1-.25-.094.34.34 0 0 1-.099-.258c0-.132.031-.27.093-.413.063-.143.155-.273.279-.39.123-.116.28-.21.47-.282.189-.072.411-.107.666-.107.307 0 .569.045.786.137a1.182 1.182 0 0 1 .618.623 1.18 1.18 0 0 1-.096 1.083 2.03 2.03 0 0 1-.378.457c-.128.11-.344.282-.646.517-.302.235-.509.417-.621.547a1.637 1.637 0 0 0-.148.187z\"/></svg>',\n                default: false,\n            },\n            {\n                name: 'hooked',\n                title: 'Haken',\n                icon: '✔ ',\n                default: false\n            },\n            {\n                name: 'crossed',\n                title: 'Kreuz',\n                icon: '✗ ',\n                default: false\n            }\n        ];\n\n        /**\n         * This list-style will be used by default\n         */\n        this.defaultListStyle = 'ordered';\n\n        const initialData = {\n            style: this.defaultListStyle,\n            items: [],\n        };\n\n        this.data = data && Object.keys(data).length ? data : initialData;\n\n        /**\n         * Instantiate caret helper\n         */\n        this.caret = new _utils_caret__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n    }\n\n    /**\n     * Returns list tag with items\n     *\n     * @returns {Element}\n     * @public\n     */\n    render() {\n        this.nodes.wrapper = this.makeListWrapper(this.data.style, [this.CSS.baseBlock]);\n\n        // fill with data\n        if (this.data.items.length) {\n            this.appendItems(this.data.items, this.nodes.wrapper);\n        } else {\n            this.appendItems([{\n                content: '',\n                items: [],\n            }], this.nodes.wrapper);\n        }\n\n        if (!this.readOnly) {\n            // detect keydown on the last item to escape List\n            this.nodes.wrapper.addEventListener('keydown', (event) => {\n                switch (event.key) {\n                    case 'Enter':\n                        this.enterPressed(event);\n                        break;\n                    case 'Backspace':\n                        this.backspace(event);\n                        break;\n                    case 'Tab':\n                        if (event.shiftKey) {\n                            this.shiftTab(event);\n                        } else {\n                            this.addTab(event);\n                        }\n                        break;\n                }\n            }, false);\n        }\n\n        return this.nodes.wrapper;\n    }\n\n    /**\n     * Creates Block Tune allowing to change the list style\n     *\n     * @public\n     * @returns {Element}\n     */\n    renderSettings() {\n        const wrapper = _utils_dom__WEBPACK_IMPORTED_MODULE_0__.make('div', [this.CSS.settingsWrapper], {});\n\n        this.settings.forEach((item) => {\n            const itemEl = _utils_dom__WEBPACK_IMPORTED_MODULE_0__.make('div', this.CSS.settingsButton, {\n                innerHTML: item.icon,\n            });\n\n            itemEl.addEventListener('click', () => {\n                this.listStyle = item.name;\n\n                /**\n                 * Clear other buttons\n                 */\n                const buttons = itemEl.parentNode.querySelectorAll('.' + this.CSS.settingsButton);\n\n                Array.from(buttons).forEach((button) =>\n                    button.classList.remove(this.CSS.settingsButtonActive)\n                );\n\n                /**\n                 * Mark active button\n                 */\n                itemEl.classList.toggle(this.CSS.settingsButtonActive);\n            });\n\n            this.api.tooltip.onHover(itemEl, item.title, {\n                placement: 'top',\n                hidingDelay: 500,\n            });\n\n            if (this.data.style === item.name) {\n                itemEl.classList.add(this.CSS.settingsButtonActive);\n            }\n\n            wrapper.appendChild(itemEl);\n        });\n\n        return wrapper;\n    }\n\n    /**\n     * Renders children list\n     *\n     * @param {ListItem[]} items - items data to append\n     * @param {Element} parentItem - where to append\n     * @returns {void}\n     */\n    appendItems(items, parentItem) {\n        items.forEach((item) => {\n            const itemEl = this.createItem(item.content, item.items);\n\n            parentItem.appendChild(itemEl);\n        });\n    };\n\n    /**\n     * Renders the single item\n     *\n     * @param {string} content - item content to render\n     * @param {ListItem[]} [items] - children\n     * @returns {Element}\n     */\n    createItem(content, items = []) {\n        const itemWrapper = _utils_dom__WEBPACK_IMPORTED_MODULE_0__.make('li', this.CSS.item);\n        const itemBody = _utils_dom__WEBPACK_IMPORTED_MODULE_0__.make('div', this.CSS.itemBody);\n        const itemContent = _utils_dom__WEBPACK_IMPORTED_MODULE_0__.make('div', this.CSS.itemContent, {\n            innerHTML: content,\n            contentEditable: !this.readOnly,\n        });\n\n        itemBody.appendChild(itemContent);\n        itemWrapper.appendChild(itemBody);\n\n        /**\n         * Append children if we have some\n         */\n        if (items && items.length > 0) {\n            this.addChildrenList(itemWrapper, items);\n        }\n\n        return itemWrapper;\n    }\n\n    /**\n     * Extracts tool's data from the DOM\n     *\n     * @returns {ListData}\n     */\n    save() {\n        /**\n         * The method for recursive collecting of the child items\n         *\n         * @param {Element} parent - where to find items\n         * @returns {ListItem[]}\n         */\n        const getItems = (parent) => {\n            const children = Array.from(parent.querySelectorAll(`:scope > .${this.CSS.item}`));\n\n            return children.map(el => {\n                const subItemsWrapper = el.querySelector(`.${this.CSS.itemChildren}`);\n                const content = this.getItemContent(el);\n                const subItems = subItemsWrapper ? getItems(subItemsWrapper) : [];\n\n                return {\n                    content,\n                    items: subItems,\n                };\n            });\n        };\n\n        return {\n            style: this.data.style,\n            items: getItems(this.nodes.wrapper),\n        };\n    }\n\n    /**\n     * Append children list to passed item\n     *\n     * @param {Element} parentItem - item that should contain passed sub-items\n     * @param {ListItem[]} items - sub items to append\n     */\n    addChildrenList(parentItem, items) {\n        const itemBody = parentItem.querySelector(`.${this.CSS.itemBody}`);\n        const sublistWrapper = this.makeListWrapper(undefined, [this.CSS.itemChildren]);\n\n        this.appendItems(items, sublistWrapper);\n\n        itemBody.appendChild(sublistWrapper);\n    }\n\n    /**\n     * Creates main <ul> or <ol> tag depended on style\n     *\n     * @param {string} [style] - 'ordered' or 'unordered'\n     * @param {string[]} [classes] - additional classes to append\n     * @returns {HTMLOListElement|HTMLUListElement}\n     */\n    makeListWrapper(style = this.listStyle, classes = []) {\n        const tag = style === 'ordered' ? 'ol' : 'ul';\n        const styleClass = style === 'ordered' ? this.CSS.wrapperOrdered : this.CSS.wrapperUnordered;\n        switch(style) {\n\n        }\n        classes.push(styleClass);\n\n        return _utils_dom__WEBPACK_IMPORTED_MODULE_0__.make(tag, [this.CSS.wrapper, ...classes]);\n    }\n\n    /**\n     * Styles\n     *\n     * @returns {object} - CSS classes names by keys\n     *\n     * @private\n     */\n    get CSS() {\n        return {\n            baseBlock: this.api.styles.block,\n            wrapper: 'cdx-nested-list',\n            wrapperOrdered: 'cdx-nested-list--ordered',\n            wrapperUnordered: 'cdx-nested-list--unordered',\n            wrapperHooked: 'cdx-nested-list--hooked',\n            wrapperCrossed: 'cdx-nested-list--crossed',\n\n            item: 'cdx-nested-list__item',\n            itemBody: 'cdx-nested-list__item-body',\n            itemContent: 'cdx-nested-list__item-content',\n            itemChildren: 'cdx-nested-list__item-children',\n            settingsWrapper: 'cdx-nested-list__settings',\n            settingsButton: this.api.styles.settingsButton,\n            settingsButtonActive: this.api.styles.settingsButtonActive,\n        };\n    }\n\n    /**\n     * Get list style name\n     *\n     * @returns {string}\n     */\n    get listStyle() {\n        return this.data.style || this.defaultListStyle;\n    }\n\n    /**\n     * Set list style\n     *\n     * @param {string} style - new style to set\n     */\n    set listStyle(style) {\n        /**\n         * Get lists elements\n         *\n         * @type {any[]}\n         */\n        const lists = Array.from(this.nodes.wrapper.querySelectorAll(`.${this.CSS.wrapper}`));\n\n        /**\n         * Add main wrapper to the list\n         */\n        lists.push(this.nodes.wrapper);\n\n        /**\n         * For each list we need to update classes\n         */\n        console.log(\"listStyle\", style);\n        lists.forEach(list => {\n            list.classList.toggle(this.CSS.wrapperUnordered, style === 'unordered');\n            list.classList.toggle(this.CSS.wrapperOrdered, style === 'ordered');\n            list.classList.toggle(this.CSS.wrapperCrossed, style === 'crossed');\n            list.classList.toggle(this.CSS.wrapperHooked, style === 'hooked');\n        });\n\n        /**\n         * Update the style in data\n         *\n         * @type {string}\n         */\n        this.data.style = style;\n    }\n\n    /**\n     * Returns current List item by the caret position\n     *\n     * @returns {Element}\n     */\n    get currentItem() {\n        let currentNode = window.getSelection().anchorNode;\n\n        if (currentNode.nodeType !== Node.ELEMENT_NODE) {\n            currentNode = currentNode.parentNode;\n        }\n\n        return currentNode.closest(`.${this.CSS.item}`);\n    }\n\n    /**\n     * Handles Enter keypress\n     *\n     * @param {KeyboardEvent} event - keydown\n     * @returns {void}\n     */\n    enterPressed(event) {\n        const currentItem = this.currentItem;\n\n        /**\n         * Prevent editor.js behaviour\n         */\n        event.stopPropagation();\n\n        /**\n         * Prevent browser behaviour\n         */\n        event.preventDefault();\n\n        /**\n         * On Enter in the last empty item, get out of list\n         */\n        const isEmpty = this.getItemContent(currentItem).trim().length === 0;\n        const isFirstLevelItem = currentItem.parentNode === this.nodes.wrapper;\n        const isLastItem = currentItem.nextElementSibling === null;\n\n        if (isFirstLevelItem && isLastItem && isEmpty) {\n            this.getOutOfList();\n\n            return;\n        } else if (isLastItem && isEmpty) {\n            this.unshiftItem();\n\n            return;\n        }\n\n        /**\n         * On other Enters, get content from caret till the end of the block\n         * And move it to the new item\n         */\n        const endingFragment = _utils_caret__WEBPACK_IMPORTED_MODULE_1__[\"default\"].extractFragmentFromCaretPositionTillTheEnd();\n        const endingHTML = _utils_dom__WEBPACK_IMPORTED_MODULE_0__.fragmentToString(endingFragment);\n        const itemChildren = currentItem.querySelector(`.${this.CSS.itemChildren}`);\n\n        /**\n         * Create the new list item\n         */\n        const itemEl = this.createItem(endingHTML, undefined);\n\n        /**\n         * Check if child items exist\n         *\n         * @type {boolean}\n         */\n        const childrenExist = itemChildren && Array.from(itemChildren.querySelectorAll(`.${this.CSS.item}`)).length > 0;\n\n        /**\n         * If item has children, prepend to them\n         * Otherwise, insert the new item after current\n         */\n        if (childrenExist) {\n            itemChildren.prepend(itemEl);\n        } else {\n            currentItem.after(itemEl);\n        }\n\n        this.focusItem(itemEl);\n    }\n\n    /**\n     * Decrease indentation of the current item\n     *\n     * @returns {void}\n     */\n    unshiftItem() {\n        const currentItem = this.currentItem;\n        const parentItem = currentItem.parentNode.closest(`.${this.CSS.item}`);\n\n        /**\n         * If item in the first-level list then no need to do anything\n         */\n        if (!parentItem) {\n            return;\n        }\n\n        this.caret.save();\n\n        parentItem.after(currentItem);\n\n        this.caret.restore();\n\n        /**\n         * If previous parent's children list is now empty, remove it.\n         */\n        const prevParentChildrenList = parentItem.querySelector(`.${this.CSS.itemChildren}`);\n        const isPrevParentChildrenEmpty = prevParentChildrenList.children.length === 0;\n\n        if (isPrevParentChildrenEmpty) {\n            prevParentChildrenList.remove();\n        }\n    }\n\n    /**\n     * Return the item content\n     *\n     * @param {Element} item - item wrapper (<li>)\n     * @returns {string}\n     */\n    getItemContent(item) {\n        const contentNode = item.querySelector(`.${this.CSS.itemContent}`);\n\n        if (_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isEmpty(contentNode)) {\n            return '';\n        }\n\n        return contentNode.innerHTML;\n    }\n\n    /**\n     * Sets focus to the item's content\n     *\n     * @param {Element} item - item (<li>) to select\n     * @param {boolean} atStart - where to set focus: at the start or at the end\n     * @returns {void}\n     */\n    focusItem(item, atStart = true) {\n        const itemContent = item.querySelector(`.${this.CSS.itemContent}`);\n\n        _utils_caret__WEBPACK_IMPORTED_MODULE_1__[\"default\"].focus(itemContent, atStart);\n    }\n\n    /**\n     * Get out from List Tool by Enter on the empty last item\n     *\n     * @returns {void}\n     */\n    getOutOfList() {\n        this.currentItem.remove();\n\n        this.api.blocks.insert();\n        this.api.caret.setToBlock(this.api.blocks.getCurrentBlockIndex());\n    }\n\n    /**\n     * Handle backspace\n     *\n     * @param {KeyboardEvent} event - keydown\n     */\n    backspace(event) {\n        /**\n         * Caret is not at start of the item\n         * Then backspace button should remove letter as usual\n         */\n        if (!_utils_caret__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isAtStart()) {\n            return;\n        }\n\n        /**\n         * Prevent default backspace behaviour\n         */\n        event.preventDefault();\n\n        const currentItem = this.currentItem;\n        const previousItem = currentItem.previousSibling;\n        const parentItem = currentItem.parentNode.closest(`.${this.CSS.item}`);\n\n        /**\n         * Do nothing with the first item in the first-level list.\n         * No previous sibling means that this is the first item in the list.\n         * No parent item means that this is a first-level list.\n         *\n         * Before:\n         * 1. |Hello\n         * 2. World!\n         *\n         * After:\n         * 1. |Hello\n         * 2. World!\n         *\n         * If it this item and the while list is empty then editor.js should\n         * process this behaviour and remove the block completely\n         *\n         * Before:\n         * 1. |\n         *\n         * After: block has been removed\n         *\n         */\n        if (!previousItem && !parentItem) {\n            return;\n        }\n\n        /**\n         * Prevent editor.js behaviour\n         */\n        event.stopPropagation();\n\n        /**\n         * Lets compute the item which will be merged with current item text\n         */\n        let targetItem;\n\n        /**\n         * If there is a previous item then we get a deepest item in its sublists\n         *\n         * Otherwise we will use the parent item\n         */\n        if (previousItem) {\n            const childrenOfPreviousItem = previousItem.querySelectorAll(`.${this.CSS.item}`);\n\n            targetItem = Array.from(childrenOfPreviousItem).pop() || previousItem;\n        } else {\n            targetItem = parentItem;\n        }\n\n        /**\n         * Get content from caret till the end of the block to move it to the new item\n         */\n        const endingFragment = _utils_caret__WEBPACK_IMPORTED_MODULE_1__[\"default\"].extractFragmentFromCaretPositionTillTheEnd();\n        const endingHTML = _utils_dom__WEBPACK_IMPORTED_MODULE_0__.fragmentToString(endingFragment);\n\n        /**\n         * Get the target item content element\n         */\n        const targetItemContent = targetItem.querySelector(`.${this.CSS.itemContent}`);\n\n        /**\n         * Set a new place for caret\n         */\n        _utils_caret__WEBPACK_IMPORTED_MODULE_1__[\"default\"].focus(targetItemContent, false);\n\n        /**\n         * Save the caret position\n         */\n        this.caret.save();\n\n        /**\n         * Update target item content by merging with current item html content\n         */\n        targetItemContent.insertAdjacentHTML('beforeend', endingHTML);\n\n        /**\n         * Get the sublist first-level items for current item\n         */\n        let currentItemSublistItems = currentItem.querySelectorAll(`.${this.CSS.itemChildren} > .${this.CSS.item}`);\n\n        /**\n         * Create an array from current item sublist items\n         */\n        currentItemSublistItems = Array.from(currentItemSublistItems);\n\n        /**\n         * Filter items for sublist first-level\n         * No need to move deeper items\n         */\n        currentItemSublistItems = currentItemSublistItems.filter(node => node.parentNode.closest(`.${this.CSS.item}`) === currentItem);\n\n        /**\n         * Reverse the array to insert items\n         */\n        currentItemSublistItems.reverse().forEach(item => {\n            /**\n             * Check if we need to save the indent for current item children\n             *\n             * If this is the first item in the list then place its children to the same level as currentItem.\n             * Same as shift+tab for all of these children.\n             *\n             * If there is a previous sibling then place children right after target item\n             */\n            if (!previousItem) {\n                /**\n                 * The first item in the list\n                 *\n                 * Before:\n                 * 1. Hello\n                 *   1.1. |My\n                 *     1.1.1. Wonderful\n                 *     1.1.2. World\n                 *\n                 * After:\n                 * 1. Hello|My\n                 *   1.1. Wonderful\n                 *   1.2. World\n                 */\n                currentItem.after(item);\n            } else {\n                /**\n                 * Not the first item\n                 *\n                 * Before:\n                 * 1. Hello\n                 *   1.1. My\n                 *   1.2. |Dear\n                 *     1.2.1. Wonderful\n                 *     1.2.2. World\n                 *\n                 * After:\n                 * 1. Hello\n                 *   1.1. My|Dear\n                 *   1.2. Wonderful\n                 *   1.3. World\n                 */\n                targetItem.after(item);\n            }\n        });\n\n        /**\n         * Remove current item element\n         */\n        currentItem.remove();\n\n        /**\n         * Restore the caret position\n         */\n        this.caret.restore();\n    }\n\n    /**\n     * Add indentation to current item\n     *\n     * @param {KeyboardEvent} event - keydown\n     */\n    addTab(event) {\n        /**\n         * Prevent editor.js behaviour\n         */\n        event.stopPropagation();\n\n        /**\n         * Prevent browser tab behaviour\n         */\n        event.preventDefault();\n\n        const currentItem = this.currentItem;\n        const prevItem = currentItem.previousSibling;\n        const isFirstChild = !prevItem;\n\n        /**\n         * In the first item we should not handle Tabs (because there is no parent item above)\n         */\n        if (isFirstChild) {\n            return;\n        }\n\n        const prevItemChildrenList = prevItem.querySelector(`.${this.CSS.itemChildren}`);\n\n        this.caret.save();\n\n        /**\n         * If prev item has child items, just append current to them\n         */\n        if (prevItemChildrenList) {\n            prevItemChildrenList.appendChild(currentItem);\n        } else {\n            /**\n             * If prev item has no child items\n             * - Create and append children wrapper to the previous item\n             * - Append current item to it\n             */\n            const sublistWrapper = this.makeListWrapper(undefined, [this.CSS.itemChildren]);\n            const prevItemBody = prevItem.querySelector(`.${this.CSS.itemBody}`);\n\n            sublistWrapper.appendChild(currentItem);\n            prevItemBody.appendChild(sublistWrapper);\n        }\n\n        this.caret.restore();\n    }\n\n    /**\n     * Reduce indentation for current item\n     *\n     * @param {KeyboardEvent} event - keydown\n     * @returns {void}\n     */\n    shiftTab(event) {\n        /**\n         * Prevent editor.js behaviour\n         */\n        event.stopPropagation();\n\n        /**\n         * Prevent browser tab behaviour\n         */\n        event.preventDefault();\n\n        /**\n         * Move item from current list to parent list\n         */\n        this.unshiftItem();\n    }\n\n    /**\n     * Convert from list to text for conversionConfig\n     * @param {ListData} data\n     * @returns {string}\n     */\n    static joinRecursive(data) {\n        return data.items\n            .map((item) => `${item.content} ${NestedList.joinRecursive(item)}`)\n            .join('');\n    }\n\n    /**\n     * Convert from text to list with import and export list to text\n     */\n    static get conversionConfig() {\n        return {\n            export: (data) => {\n                return NestedList.joinRecursive(data);\n            },\n            import: (content) => {\n                return {\n                    items: [{\n                        content,\n                        items: []\n                    }],\n                    style: 'unordered'\n                };\n            }\n        };\n    }\n}\n\n\n//# sourceURL=webpack://NestedList/./src/index.js?");

/***/ }),

/***/ "./src/utils/caret.js":
/*!****************************!*\
  !*** ./src/utils/caret.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Caret)\n/* harmony export */ });\n/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom */ \"./src/utils/dom.js\");\n\n\n/**\n * Helper for working with caret\n */\nclass Caret {\n  /**\n   * Store internal properties\n   */\n  constructor() {\n    /**\n     * The <span> for caret saving/restoring\n     */\n    this.savedFakeCaret = undefined;\n  }\n\n  /**\n   * Saves caret position using hidden <span>\n   *\n   * @returns {void}\n   */\n  save() {\n    const range = Caret.range;\n    const cursor = _dom__WEBPACK_IMPORTED_MODULE_0__.make('span');\n\n    cursor.hidden = true;\n\n    range.insertNode(cursor);\n\n    this.savedFakeCaret = cursor;\n  }\n\n  /**\n   * Restores the caret position saved by the save() method\n   *\n   * @returns {void}\n   */\n  restore() {\n    if (!this.savedFakeCaret) {\n      return;\n    }\n\n    const sel = window.getSelection();\n    const range = new Range();\n\n    range.setStartAfter(this.savedFakeCaret);\n    range.setEndAfter(this.savedFakeCaret);\n\n    sel.removeAllRanges();\n    sel.addRange(range);\n\n    /**\n     * A little timeout uses to allow browser to set caret after element before we remove it.\n     */\n    setTimeout(() => {\n      this.savedFakeCaret.remove();\n    }, 150);\n  }\n\n  /**\n   * Returns the first range\n   *\n   * @returns {Range|null}\n   */\n  static get range() {\n    const selection = window.getSelection();\n\n    return selection && selection.rangeCount ? selection.getRangeAt(0) : null;\n  }\n\n  /**\n   * Extract content fragment from Caret position to the end of contenteditable element\n   *\n   * @returns {DocumentFragment|void}\n   */\n  static extractFragmentFromCaretPositionTillTheEnd() {\n    const selection = window.getSelection();\n\n    if (!selection.rangeCount) {\n      return;\n    }\n\n    const selectRange = selection.getRangeAt(0);\n    let startNode = selectRange.startContainer;\n\n    /**\n     * selectRange.startContainer can point to the Text node which has no .closest() method\n     */\n    if (startNode.nodeType !== Node.ELEMENT_NODE) {\n      startNode = startNode.parentNode;\n    }\n\n    const currentBlockInput = startNode.closest('[contenteditable]');\n\n    selectRange.deleteContents();\n\n    const range = selectRange.cloneRange();\n\n    range.selectNodeContents(currentBlockInput);\n    range.setStart(selectRange.endContainer, selectRange.endOffset);\n\n    return range.extractContents();\n  }\n\n  /**\n   * Set focus to contenteditable or native input element\n   *\n   * @param {HTMLElement} element - element where to set focus\n   * @param {boolean} atStart - where to set focus: at the start or at the end\n   *\n   * @returns {void}\n   */\n  static focus(element, atStart = true) {\n    const range = document.createRange();\n    const selection = window.getSelection();\n\n    range.selectNodeContents(element);\n    range.collapse(atStart);\n\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n\n  /**\n   * Check if the caret placed at the start of the contenteditable element\n   *\n   * @returns {void}\n   */\n  static isAtStart() {\n    const selection = window.getSelection();\n\n    if (selection.focusOffset > 0) {\n      return false;\n    }\n\n    const focusNode = selection.focusNode;\n\n    /**\n     * In case of\n     * <div contenteditable>\n     *     <p><b></b></p>   <-- first (and deepest) node is <b></b>\n     *     |adaddad         <-- focus node\n     * </div>\n     */\n    const leftSiblings = Caret.getHigherLevelSiblings(focusNode, 'left');\n\n    const nothingAtLeft = leftSiblings.every((node) => {\n      return _dom__WEBPACK_IMPORTED_MODULE_0__.isEmpty(node);\n    });\n\n    return nothingAtLeft;\n  }\n\n  /**\n   * Get all first-level (first child of [contenteditabel]) siblings from passed node\n   * Then you can check it for emptiness\n   *\n   * @example\n   * <div contenteditable>\n   * <p></p>                            |\n   * <p></p>                            | left first-level siblings\n   * <p></p>                            |\n   * <blockquote><a><b>adaddad</b><a><blockquote>       <-- passed node for example <b>\n   * <p></p>                            |\n   * <p></p>                            | right first-level siblings\n   * <p></p>                            |\n   * </div>\n   *\n   * @param {HTMLElement} from - element from which siblings should be searched\n   * @param {'left' | 'right'} direction - direction of search\n   *\n   * @returns {HTMLElement[]}\n   */\n  static getHigherLevelSiblings(from, direction = 'left') {\n    let current = from;\n    const siblings = [];\n\n    /**\n     * Find passed node's firs-level parent (in example - blockquote)\n     */\n    while (current.parentNode && (current.parentNode).contentEditable !== 'true') {\n      current = current.parentNode;\n    }\n\n    const sibling = direction === 'left' ? 'previousSibling' : 'nextSibling';\n\n    /**\n     * Find all left/right siblings\n     */\n    while (current[sibling]) {\n      current = current[sibling];\n      siblings.push(current);\n    }\n\n    return siblings;\n  }\n}\n\n\n//# sourceURL=webpack://NestedList/./src/utils/caret.js?");

/***/ }),

/***/ "./src/utils/dom.js":
/*!**************************!*\
  !*** ./src/utils/dom.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"make\": () => (/* binding */ make),\n/* harmony export */   \"fragmentToString\": () => (/* binding */ fragmentToString),\n/* harmony export */   \"isEmpty\": () => (/* binding */ isEmpty)\n/* harmony export */ });\n/**\n * Helper for making Elements with attributes\n *\n * @param  {string} tagName           - new Element tag name\n * @param  {Array|string} classNames  - list or name of CSS classname(s)\n * @param  {object} attributes        - any attributes\n * @returns {Element}\n */\nfunction make(tagName, classNames = null, attributes = {}) {\n  const el = document.createElement(tagName);\n\n  if (Array.isArray(classNames)) {\n    el.classList.add(...classNames);\n  } else if (classNames) {\n    el.classList.add(classNames);\n  }\n\n  for (const attrName in attributes) {\n    el[attrName] = attributes[attrName];\n  }\n\n  return el;\n}\n\n/**\n * Returns the HTML content of passed Document Fragment\n *\n * @param {DocumentFragment} fragment - document fragment to process\n * @returns {string}\n */\nfunction fragmentToString(fragment) {\n  const div = make('div');\n\n  div.appendChild(fragment);\n\n  return div.innerHTML;\n}\n\n/**\n * breadth-first search (BFS)\n * {@link https://en.wikipedia.org/wiki/Breadth-first_search}\n *\n * @description Pushes to stack all DOM leafs and checks for emptiness\n *\n * @param {Node} node - node to check\n * @returns {boolean}\n */\nfunction isEmpty(node) {\n  let content;\n\n  if (node.nodeType !== Node.ELEMENT_NODE) {\n    content = node.textContent;\n  } else {\n    content = node.innerHTML;\n\n    /**\n     * Don't count <br>s as content\n     */\n    content = content.replaceAll('<br>', '');\n  }\n\n  return content.trim().length === 0;\n}\n\n\n//# sourceURL=webpack://NestedList/./src/utils/dom.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	__webpack_exports__ = __webpack_exports__["default"];
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});